OS has 2 Components:
1) user space
2) Kernal

 [ OS = User Space + Kernal ]

User Space = GUI + cli
Kernal = comminucates with Hardware 
- process management - start/stop/schedule
- process and thread schedule
- context switching , 
- time management of process, thread
- process comminucation between process
- memory management (RAM) - allocation, de-allocation, free space management, 
- file management ( Hard disk )- dir,file,- create,
- I/O devices management- spooling ,buffering, caching
- when working on something but want to stop and start new process it is done by Interrupt
  and software do this it uses Interrupt
- There is always switching between kernal space and User_Space 
  ex: when u use ; mkdir dir_ this is in user mode but when hit enter it will go to kernal and this is Interrupt
  so it is done because or by help of Interrupt of software - this is switching between user mode and kernal mode
- main tasks of kernal:
  1] I/O management
  2] file management
  3] process management
  4] memory management
- tpes: 3 
    1] monolithic Kernal (oldest)- all functions to be done by Kernal itself not gives someone else to do that task
       - comminucates fast as all functions are in Kernal
       - but single point of failure so less relaibale 
       ex; Linux, Unix, MS-dos
    2] Micro Kernal:
       - file management, I/O management: User_Space
       - process management, memory management : Kernal
       - pros: kernal less buily/ busy - fast , relaibale than monolithic kernal
    3] hybrid kernal:
       - combined approach monolithic and Micro
       - User_Space: file management
       - Kernal space: 1)process 2) memory 3) I/O management
       ex: mac os, windows all (after 7)
    - other kernal: 4] Nano 5] Exo kernal
general process:

User_Space --> Kernal --> Hardware

Q] how User_Space applications comminucates with kernal ? using System call
 - System call is mechanism or medium between User_Space and Kernal