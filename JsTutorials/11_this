// "this" - Summary
// The this keyword can lead to some headaches in JavaScript - this summary hopefully acts as a remedy.

// this refers to different things, depending on where it's used and how (if used in a function) a function is called.

// Generally, this refers to the "thing" which called a function (if used inside of a function). That can be the global context, an object or some bound data/ object (e.g. when the browser binds this to the button that triggered a click event).



// 1) this in Global Context (i.e. outside of any function)

function something() {  }
 
console.log(this); // logs global object (window in browser) - ALWAYS (also in strict mode)!



// 2) this in a Function (non-Arrow) - Called in the global context

function something() { 
    console.log(this);
}
 
something(); // logs global object (window in browser) in non-strict mode, undefined in strict mode


// 3) this in an Arrow-Function - Called in the global context

const something = () => { 
    console.log(this);
}
 
something(); // logs global object (window in browser) - ALWAYS (also in strict mode)!




// 4) this in a Method (non-Arrow) - Called on an object

const person = { 
    name: 'Max',
    greet: function() { // or use method shorthand: greet() { ... }
        console.log(this.name);
    }
};
 
person.greet(); // logs 'Max', "this" refers to the person object



// 5) this in a Method (Arrow Function) - Called on an object

const person = { 
    name: 'Max',
    greet: () => {
        console.log(this.name);
    }
};
 
person.greet(); // logs nothing (or some global name on window object), "this" refers to global (window) object, even in strict mode
// this can refer to unexpected things if you call it on some other object, e.g.:

const person = { 
    name: 'Max',
    greet() {
        console.log(this.name);
    }
};
 
const anotherPerson = { name: 'Manuel' }; // does NOT have a built-in greet method!
 
anotherPerson.sayHi = person.greet; // greet is NOT called here, it's just assigned to a new property/ method on the "anotherPerson" object
 
anotherPerson.sayHi(); // logs 'Manuel' because method is called on "anotherPerson" object => "this" refers to the "thing" which called it
// If in doubt, a console.log(this); can always help you find out what this is referring to at the moment!


//---------------------------------------------------------------------------
// can I say that method is property of an object while arrow function is not

// ChatGPT
// Yes, you can say that a method is a property of an object, while an arrow function is not considered a property in the same way.

// In JavaScript, a method is a function that is defined as a property of an object. It is associated with the object and can be accessed using dot notation (object.method()). Methods have access to the object's properties and can use the this keyword to refer to the object itself.

// For example:

// javascript
// Copy code
const obj = {
  name: 'John',
  sayHello: function() {
    console.log(`Hello, ${this.name}!`);
  }
};

obj.sayHello(); // Output: Hello, John!
// In this example, sayHello is a method of the obj object. It is defined as a property with a function value. When obj.sayHello() is called, the method is invoked, and it can access the name property of the object using this.name.

// On the other hand, arrow functions in JavaScript are not considered methods in the same sense. They are not properties of an object but rather standalone functions. Arrow functions do not have their own this value and lexically bind the this value from their surrounding scope.

// For example:

// javascript
// Copy code
const obj = {
  name: 'John',
  sayHello: () => {
    console.log(`Hello, ${this.name}!`);
  }
};

obj.sayHello(); // Output: Hello, undefined!
// In this example, sayHello is an arrow function defined within the obj object. However, since arrow functions do not have their own this value, this inside the arrow function refers to the global object (or undefined in strict mode), rather than the obj object. As a result, accessing this.name does not yield the expected result.

// Therefore, while a method is a property of an object and has access to the object's properties through this, arrow functions are not considered properties and do not have their own this binding.