// explain Object.assign()
// ChatGPT
// The Object.assign() method in JavaScript is used to copy the values of all enumerable properties from one or more source objects to a target object. It allows you to merge objects or create a shallow copy of an object.

// The basic syntax of Object.assign() is as follows:

// javascript
// Copy code
// Object.assign(target, ...sources);
// Here's a breakdown of the parameters:

// target: The target object to which the properties will be copied. It is the object that receives the copied properties.
// sources: One or more source objects from which the properties will be copied. These are the objects that provide the properties to be copied.
// The Object.assign() method copies the properties from the source objects to the target object. If multiple source objects are provided, the properties are copied in the order they are passed. If there are properties with the same name, the later sources will overwrite the earlier ones.

// Here's an example to illustrate how Object.assign() works:

// javascript
// Copy code
// const target = {};

// const source1 = { name: 'John' };
// const source2 = { age: 30 };
// const source3 = { gender: 'male' };

// Object.assign(target, source1, source2, source3);

// console.log(target); // Output: { name: 'John', age: 30, gender: 'male' }
// In the example above, we create an empty target object. We then define three source objects, each with different properties. By using Object.assign(), we copy the properties from the source objects to the target object. The resulting target object contains all the properties from the source objects.

// It's important to note that Object.assign() performs a shallow copy, meaning that it only copies the enumerable properties of the source objects. If a property value is a reference to an object (e.g., an array or another object), it copies the reference, not the actual object. If you modify the properties of the original object or source objects after the assignment, those changes will be reflected in the target object as well.

// Object.assign() is commonly used for object merging, creating clones or copies of objects, or combining the properties of multiple objects into a single object.

// It's also worth mentioning that Object.assign() does not copy inherited properties or non-enumerable properties. To perform a deep copy or include non-enumerable properties, you may need to use other techniques like JSON.parse() and JSON.stringify(), or external libraries like Lodash's _.cloneDeep() method.





//-------------------------------------  Object.crate()  -----------------------------------------


// cam change the prototype object using the object which is inheriting it
// ChatGPT
// Yes, you can change the properties of the prototype object using an object that inherits from it. Since objects inherit properties from their prototype object, modifying a property on the prototype object will affect all objects that inherit from it through the prototype chain.

// Here's an example to demonstrate this behavior:

// javascript
// Copy code
// const personPrototype = {
//   name: 'John'
// };

// const john = Object.create(personPrototype);
// const jane = Object.create(personPrototype);

// console.log(john.name); // Output: John
// console.log(jane.name); // Output: John

// john.__proto__.name = 'Jane';

// console.log(john.name); // Output: Jane (change reflected)
// console.log(jane.name); // Output: Jane (change reflected)
// In the example above, we create a personPrototype object with a name property set to 'John'. We create two objects, john and jane, using Object.create(personPrototype). Both objects inherit the name property from the personPrototype.

// To change the name property on the prototype object, we can access it through the __proto__ property of any object that inherits from it. In this case, we access john.__proto__.name and set it to 'Jane'. This change in the prototype object is then reflected in both john and jane when we access the name property on them.

// It's important to note that accessing the __proto__ property directly is not recommended for regular use. It's used here for demonstration purposes to showcase the ability to modify the prototype object through an inheriting object. In practice, it's generally better to modify the prototype object directly or use other methods provided by JavaScript, such as Object.setPrototypeOf(), to change the prototype of an object.

//------------------------- Object.hasOwnProperty() --------------------

//------------------------- Object.defineProperty() --------------------

// Object.defineProperty(AuthProvider.prototype, "tokenHeader", {
//     get: function () { return this.SatellizerConfig.tokenHeader; },
//     set: function (value) { this.SatellizerConfig.tokenHeader = value; },
//     enumerable: true,
//     configurable: true
// });